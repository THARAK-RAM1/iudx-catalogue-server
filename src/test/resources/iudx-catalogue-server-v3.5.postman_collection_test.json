{
	"info": {
		"_postman_id": "29a23e40-caaa-49e1-8ad8-5804e101d629",
		"name": "iudx-catalogue-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search APIs",
			"item": [
				{
					"name": "Tag Search",
					"item": [{
							"name": "200 (invalid value) - Tag Search 2 multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[tags]&value=[[abc, abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[abc]&value=[[abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]&limit=100&offset=0",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId]&limit=1000000&offset=0",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId]"
										},
										{
											"key": "limit",
											"value": "1000000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId]&limit=100&offset=1000000",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "1000000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Complex Search",
					"item": [
						{
							"name": "200 (success) - GeoFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								},
								"description": "Success-3 GeoText (filter)"
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText (filter)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TagsFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[aqm]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TextFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=10001",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name]"
										},
										{
											"key": "limit",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=1001&offset=1010101",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name]"
										},
										{
											"key": "limit",
											"value": "1001"
										},
										{
											"key": "offset",
											"value": "1010101"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}
